
/**
 * Up until now we've been using the default Cmajor example to generate sounds.
 * This works but it might not be ideal.
 *
 * A processor that generates a sound wave is called an Oscillator.
 *
 * You can code your own oscillators, or use the ones provided by Cmajor.
 *
 * For this session we will use a built-in processor called PolyblepOscillator.
 *
 * PolyBLEP is a technique to prevent aliasing. Alias here refers to unwanted
 * sounds that occur when generating sounds that are higher than what the
 * computer can represent. This is a complex topic that is outside of the scope
 * of this session but feel free to reach out if you have questions!
 *
 * Note: we're also changing the timbre of the sound. Oscillators come in
 * different forms. Sine, Saw, Square, Pulse, Triangle, etc.. Again this could
 * be a topic to explore further if you are interested!
 */

graph Main  [[ main ]] {
    output stream float out;
    input event std::midi::Message midiIn;

    let NUMBER_OF_VOICES = 8;

    node {
        voices = Voice[8];
        allocator = std::voices::VoiceAllocator(NUMBER_OF_VOICES);
    }

    connection {
        midiIn -> std::midi::MPEConverter -> allocator;
        allocator.voiceEventOut -> voices.eventIn;
        voices -> std::levels::ConstantGain(float, 0.15f) -> out;
    }
}

processor NoteToFrequency {
    input event (std::notes::NoteOn) eventIn;
    output event float frequencyOut;
    
    event eventIn(std::notes::NoteOn e) {
        frequencyOut <- std::notes::noteToFrequency(e.pitch);
    }
}

graph Voice {
    output stream float out;
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    
    node {
        oscillator = std::oscillators::PolyblepOscillator(float);
        envelope = std::envelopes::FixedASR(0.1f, 0.1f);
    }

    connection {
        eventIn -> NoteToFrequency -> oscillator.frequencyIn;
        eventIn -> envelope.eventIn;
        (oscillator.out * envelope.gainOut) -> out;
    }
}
