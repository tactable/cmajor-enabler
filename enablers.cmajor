
/**
 * Let's try to do the minimum amount of work to make our "midi" input work.
 * If a note is pressed we set isPlaying to true, when a note is released we
 * set it to false.
 *
 * We also use a function provided by Cmajor to extract the frequency for a
 * given midi note.
 *
 * Now we can play the keyboard, but there's a few issues...
 */

graph Main  [[ main ]] {
    output stream float out;
    input event std::midi::Message midiIn;

    node generator = SoundGenerator;

    connection midiIn -> std::midi::MPEConverter -> generator.eventIn;
    connection generator.out -> out;
}

processor SoundGenerator {
    output stream float out;
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    
    event eventIn(std::notes::NoteOn e) {
        isPlaying = true;
        frequency = std::notes::noteToFrequency(e.pitch);
    }

    event eventIn(std::notes::NoteOff e) {
        isPlaying = false;
    }

    void main() {
        loop {
            if (isPlaying) {
                out <- volume * sin (phase);
            }

            let phaseDelta = float (frequency * processor.period * twoPi);
            phase = addModulo2Pi (phase, phaseDelta);
            advance();
        }
    }

    let volume = 0.15f;
    float phase;
    float frequency = 440.0f;
    bool isPlaying = false;
}
