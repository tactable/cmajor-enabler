
/**
 * In our initial version we had a parameter to control the frequency. Let's
 * use a paramater to control the filter this time.
 *
 * We'll add a parameter to our main graph. The annotations make an input event
 * or value a parameter that shows up in our UI.
 *
 * We pass the parameter along to our voices. They will all be affected when we
 * change the parameter.
 *
 * In order to multiply events we need another helper processor. We can rewrite
 * our Double processor and have it multiply 2 events instead.
 */

graph Main  [[ main ]] {
    output stream float out;
    input event std::midi::Message midiIn;
    input event float filterCutoff  [[ name: "Filter Cutoff", min: 1.0f, max: 4.0f, init: 2.0f ]];

    let NUMBER_OF_VOICES = 8;

    node {
        voices = Voice[8];
        allocator = std::voices::VoiceAllocator(NUMBER_OF_VOICES);
    }

    connection {
        midiIn -> std::midi::MPEConverter -> allocator;
        allocator.voiceEventOut -> voices.eventIn;
        filterCutoff -> voices.filterCutoff;
        voices -> std::levels::ConstantGain(float, 0.15f) -> out;
    }
}

processor NoteToFrequency {
    input event (std::notes::NoteOn) eventIn;
    output event float frequencyOut;
    
    event eventIn(std::notes::NoteOn e) {
        frequencyOut <- std::notes::noteToFrequency(e.pitch);
    }
}

processor Multiply {
    input event float in1;
    input event float in2;
    output event float out;

    float value1 = 1.0f;
    float value2 = 1.0f;

    event in1(float x) {
        value1 = x;
        out <- value1 * value2;
    }

    event in2(float x) {
        value2 = x;
        out <- value1 * value2;
    }
}

graph Voice {
    output stream float out;
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    input event float filterCutoff;
    
    node {
        oscillator = std::oscillators::PolyblepOscillator(float);
        envelope = std::envelopes::FixedASR(0.1f, 0.1f);
        noteToFrequency = NoteToFrequency;
        filter = std::filters::simper::Processor;
        mul = Multiply;
    }

    connection {
        eventIn -> noteToFrequency;
        noteToFrequency -> oscillator.frequencyIn;
        noteToFrequency -> mul.in1;
        filterCutoff -> mul.in2;
        mul.out -> filter.frequency;
        eventIn -> envelope.eventIn;
        (oscillator.out * envelope.gainOut) -> filter.in;
        filter.out -> out;
    }
}
