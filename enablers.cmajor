
/**
 * Let's make our solution better.
 *
 * Instead of a binary state for "is playing" it's better to use an envelope.
 *
 * The envelope describes the volume of our sound over time.
 *
 * There are different kinds of envelopes. Here we use one that allows us to
 * set two parameters:
 * - Attack describes how long a sound "fades in". A "short attack" means a
 *   sound will be at full volume very quickly, a "long attack" means the sound
 *   will build up for some time.
 * - Release is kind of the opposite. It describes how long a sound will fade
 *   out after the note is released.
 */

graph Main  [[ main ]] {
    output stream float out;
    input event std::midi::Message midiIn;

    node {
        generator = SoundGenerator;
        converter = std::midi::MPEConverter;
        envelope = std::envelopes::FixedASR(0.1f, 0.1f);
    }

    connection {
        midiIn -> converter;
        converter -> generator.eventIn;
        converter -> envelope.eventIn;
        (generator.out * envelope.gainOut) -> out;
    }
}

processor SoundGenerator {
    output stream float out;
    input event (std::notes::NoteOn) eventIn;
    
    event eventIn(std::notes::NoteOn e) {
        frequency = std::notes::noteToFrequency(e.pitch);
    }

    void main() {
        loop {
            out <- volume * sin (phase);

            let phaseDelta = float (frequency * processor.period * twoPi);
            phase = addModulo2Pi (phase, phaseDelta);
            advance();
        }
    }

    let volume = 0.15f;
    float phase;
    float frequency = 440.0f;
}
