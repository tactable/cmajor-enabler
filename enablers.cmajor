
/**
 * So far our synthesizer has been only able to play one sound at a time. Let's
 * update it so we can play chords and notes that flow into each other.
 *
 * To do this we need multiple "voices" that are capable of sounding at the
 * same time. To make sure the right voice is playing at the right time we can
 * use the built in "Voice Allocator". Based on which notes are played this
 * allocator will decide which voice should play the sound.
 */

graph Main  [[ main ]] {
    output stream float out;
    input event std::midi::Message midiIn;

    let NUMBER_OF_VOICES = 8;

    node {
        voices = Voice[8];
        allocator = std::voices::VoiceAllocator(NUMBER_OF_VOICES);
    }

    connection {
        midiIn -> std::midi::MPEConverter -> allocator;
        allocator.voiceEventOut -> voices.eventIn;
        voices -> out;
    }
}


graph Voice {
    output stream float out;
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    
    node {
        generator = SoundGenerator;
        envelope = std::envelopes::FixedASR(0.1f, 0.1f);
    }

    connection {
        eventIn -> generator.eventIn;
        eventIn -> envelope.eventIn;
        (generator.out * envelope.gainOut) -> out;
    }
}

processor SoundGenerator {
    output stream float out;
    input event (std::notes::NoteOn) eventIn;
    
    event eventIn(std::notes::NoteOn e) {
        frequency = std::notes::noteToFrequency(e.pitch);
    }

    void main() {
        loop {
            out <- volume * sin (phase);

            let phaseDelta = float (frequency * processor.period * twoPi);
            phase = addModulo2Pi (phase, phaseDelta);
            advance();
        }
    }

    let volume = 0.15f;
    float phase;
    float frequency = 440.0f;
}
